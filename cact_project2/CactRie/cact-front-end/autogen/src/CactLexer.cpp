
// Generated from ./grammar/CactLexer.g4 by ANTLR 4.13.1


#include "CactLexer.h"


using namespace antlr4;

using namespace cactfrontend;


using namespace antlr4;

namespace {

struct CactLexerStaticData final {
  CactLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CactLexerStaticData(const CactLexerStaticData&) = delete;
  CactLexerStaticData(CactLexerStaticData&&) = delete;
  CactLexerStaticData& operator=(const CactLexerStaticData&) = delete;
  CactLexerStaticData& operator=(CactLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cactlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CactLexerStaticData *cactlexerLexerStaticData = nullptr;

void cactlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cactlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(cactlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CactLexerStaticData>(
    std::vector<std::string>{
      "BooleanConstant", "Const", "Int32", "Bool", "Float", "Double", "Void", 
      "If", "Else", "While", "Break", "Continue", "Return", "LeftBracket", 
      "RightBracket", "LeftParenthesis", "RightParenthesis", "ExclamationMark", 
      "Asterisk", "Slash", "Percent", "Minus", "Plus", "Less", "LessEqual", 
      "Greater", "GreaterEqual", "LogicalEqual", "NotEqual", "LogicalAnd", 
      "LogicalOr", "LeftBrace", "RightBrace", "Equal", "Comma", "Semicolon", 
      "Identifier", "IntegerConstant", "FloatConstant", "DoubleConstant", 
      "LineComment", "BlockComment", "NewLine", "WhiteSpaces"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "'const'", "'int'", "'bool'", "'float'", "'double'", "'void'", 
      "'if'", "'else'", "'while'", "'break'", "'continue'", "'return'", 
      "'['", "']'", "'('", "')'", "'!'", "'*'", "'/'", "'%'", "'-'", "'+'", 
      "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", "'{'", 
      "'}'", "'='", "','", "';'"
    },
    std::vector<std::string>{
      "", "BooleanConstant", "Const", "Int32", "Bool", "Float", "Double", 
      "Void", "If", "Else", "While", "Break", "Continue", "Return", "LeftBracket", 
      "RightBracket", "LeftParenthesis", "RightParenthesis", "ExclamationMark", 
      "Asterisk", "Slash", "Percent", "Minus", "Plus", "Less", "LessEqual", 
      "Greater", "GreaterEqual", "LogicalEqual", "NotEqual", "LogicalAnd", 
      "LogicalOr", "LeftBrace", "RightBrace", "Equal", "Comma", "Semicolon", 
      "Identifier", "IntegerConstant", "FloatConstant", "DoubleConstant", 
      "LineComment", "BlockComment", "NewLine", "WhiteSpaces"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,44,434,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,99,8,0,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
  	4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
  	1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,
  	1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
  	1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
  	5,36,224,8,36,10,36,12,36,227,9,36,1,37,1,37,1,37,5,37,232,8,37,10,37,
  	12,37,235,9,37,1,37,1,37,4,37,239,8,37,11,37,12,37,240,1,37,1,37,1,37,
  	4,37,246,8,37,11,37,12,37,247,3,37,250,8,37,1,38,3,38,253,8,38,1,38,1,
  	38,4,38,257,8,38,11,38,12,38,258,1,38,3,38,262,8,38,1,38,4,38,265,8,38,
  	11,38,12,38,266,1,38,1,38,5,38,271,8,38,10,38,12,38,274,9,38,1,38,3,38,
  	277,8,38,1,38,1,38,4,38,281,8,38,11,38,12,38,282,1,38,1,38,3,38,287,8,
  	38,1,38,4,38,290,8,38,11,38,12,38,291,1,38,3,38,295,8,38,1,38,4,38,298,
  	8,38,11,38,12,38,299,1,38,1,38,5,38,304,8,38,10,38,12,38,307,9,38,3,38,
  	309,8,38,1,38,1,38,3,38,313,8,38,1,38,4,38,316,8,38,11,38,12,38,317,3,
  	38,320,8,38,1,38,1,38,1,39,3,39,325,8,39,1,39,1,39,4,39,329,8,39,11,39,
  	12,39,330,1,39,3,39,334,8,39,1,39,4,39,337,8,39,11,39,12,39,338,1,39,
  	1,39,5,39,343,8,39,10,39,12,39,346,9,39,1,39,3,39,349,8,39,1,39,1,39,
  	4,39,353,8,39,11,39,12,39,354,1,39,1,39,3,39,359,8,39,1,39,4,39,362,8,
  	39,11,39,12,39,363,1,39,3,39,367,8,39,1,39,4,39,370,8,39,11,39,12,39,
  	371,1,39,1,39,5,39,376,8,39,10,39,12,39,379,9,39,3,39,381,8,39,1,39,1,
  	39,3,39,385,8,39,1,39,4,39,388,8,39,11,39,12,39,389,3,39,392,8,39,1,40,
  	1,40,1,40,1,40,5,40,398,8,40,10,40,12,40,401,9,40,1,40,1,40,1,41,1,41,
  	1,41,1,41,5,41,409,8,41,10,41,12,41,412,9,41,1,41,1,41,1,41,1,41,1,41,
  	1,42,1,42,3,42,421,8,42,1,42,3,42,424,8,42,1,42,1,42,1,43,4,43,429,8,
  	43,11,43,12,43,430,1,43,1,43,1,410,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
  	15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
  	39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
  	31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
  	85,43,87,44,1,0,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
  	1,0,49,57,1,0,48,57,1,0,48,55,2,0,88,88,120,120,3,0,48,57,65,70,97,102,
  	1,0,45,45,2,0,69,69,101,101,2,0,43,43,45,45,2,0,70,70,102,102,2,0,10,
  	10,13,13,2,0,9,9,32,32,482,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
  	0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
  	0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
  	1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
  	0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
  	0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
  	1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
  	0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
  	0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,98,1,0,0,0,3,100,1,0,0,0,5,106,
  	1,0,0,0,7,110,1,0,0,0,9,115,1,0,0,0,11,121,1,0,0,0,13,128,1,0,0,0,15,
  	133,1,0,0,0,17,136,1,0,0,0,19,141,1,0,0,0,21,147,1,0,0,0,23,153,1,0,0,
  	0,25,162,1,0,0,0,27,169,1,0,0,0,29,171,1,0,0,0,31,173,1,0,0,0,33,175,
  	1,0,0,0,35,177,1,0,0,0,37,179,1,0,0,0,39,181,1,0,0,0,41,183,1,0,0,0,43,
  	185,1,0,0,0,45,187,1,0,0,0,47,189,1,0,0,0,49,191,1,0,0,0,51,194,1,0,0,
  	0,53,196,1,0,0,0,55,199,1,0,0,0,57,202,1,0,0,0,59,205,1,0,0,0,61,208,
  	1,0,0,0,63,211,1,0,0,0,65,213,1,0,0,0,67,215,1,0,0,0,69,217,1,0,0,0,71,
  	219,1,0,0,0,73,221,1,0,0,0,75,249,1,0,0,0,77,319,1,0,0,0,79,391,1,0,0,
  	0,81,393,1,0,0,0,83,404,1,0,0,0,85,423,1,0,0,0,87,428,1,0,0,0,89,90,5,
  	116,0,0,90,91,5,114,0,0,91,92,5,117,0,0,92,99,5,101,0,0,93,94,5,102,0,
  	0,94,95,5,97,0,0,95,96,5,108,0,0,96,97,5,115,0,0,97,99,5,101,0,0,98,89,
  	1,0,0,0,98,93,1,0,0,0,99,2,1,0,0,0,100,101,5,99,0,0,101,102,5,111,0,0,
  	102,103,5,110,0,0,103,104,5,115,0,0,104,105,5,116,0,0,105,4,1,0,0,0,106,
  	107,5,105,0,0,107,108,5,110,0,0,108,109,5,116,0,0,109,6,1,0,0,0,110,111,
  	5,98,0,0,111,112,5,111,0,0,112,113,5,111,0,0,113,114,5,108,0,0,114,8,
  	1,0,0,0,115,116,5,102,0,0,116,117,5,108,0,0,117,118,5,111,0,0,118,119,
  	5,97,0,0,119,120,5,116,0,0,120,10,1,0,0,0,121,122,5,100,0,0,122,123,5,
  	111,0,0,123,124,5,117,0,0,124,125,5,98,0,0,125,126,5,108,0,0,126,127,
  	5,101,0,0,127,12,1,0,0,0,128,129,5,118,0,0,129,130,5,111,0,0,130,131,
  	5,105,0,0,131,132,5,100,0,0,132,14,1,0,0,0,133,134,5,105,0,0,134,135,
  	5,102,0,0,135,16,1,0,0,0,136,137,5,101,0,0,137,138,5,108,0,0,138,139,
  	5,115,0,0,139,140,5,101,0,0,140,18,1,0,0,0,141,142,5,119,0,0,142,143,
  	5,104,0,0,143,144,5,105,0,0,144,145,5,108,0,0,145,146,5,101,0,0,146,20,
  	1,0,0,0,147,148,5,98,0,0,148,149,5,114,0,0,149,150,5,101,0,0,150,151,
  	5,97,0,0,151,152,5,107,0,0,152,22,1,0,0,0,153,154,5,99,0,0,154,155,5,
  	111,0,0,155,156,5,110,0,0,156,157,5,116,0,0,157,158,5,105,0,0,158,159,
  	5,110,0,0,159,160,5,117,0,0,160,161,5,101,0,0,161,24,1,0,0,0,162,163,
  	5,114,0,0,163,164,5,101,0,0,164,165,5,116,0,0,165,166,5,117,0,0,166,167,
  	5,114,0,0,167,168,5,110,0,0,168,26,1,0,0,0,169,170,5,91,0,0,170,28,1,
  	0,0,0,171,172,5,93,0,0,172,30,1,0,0,0,173,174,5,40,0,0,174,32,1,0,0,0,
  	175,176,5,41,0,0,176,34,1,0,0,0,177,178,5,33,0,0,178,36,1,0,0,0,179,180,
  	5,42,0,0,180,38,1,0,0,0,181,182,5,47,0,0,182,40,1,0,0,0,183,184,5,37,
  	0,0,184,42,1,0,0,0,185,186,5,45,0,0,186,44,1,0,0,0,187,188,5,43,0,0,188,
  	46,1,0,0,0,189,190,5,60,0,0,190,48,1,0,0,0,191,192,5,60,0,0,192,193,5,
  	61,0,0,193,50,1,0,0,0,194,195,5,62,0,0,195,52,1,0,0,0,196,197,5,62,0,
  	0,197,198,5,61,0,0,198,54,1,0,0,0,199,200,5,61,0,0,200,201,5,61,0,0,201,
  	56,1,0,0,0,202,203,5,33,0,0,203,204,5,61,0,0,204,58,1,0,0,0,205,206,5,
  	38,0,0,206,207,5,38,0,0,207,60,1,0,0,0,208,209,5,124,0,0,209,210,5,124,
  	0,0,210,62,1,0,0,0,211,212,5,123,0,0,212,64,1,0,0,0,213,214,5,125,0,0,
  	214,66,1,0,0,0,215,216,5,61,0,0,216,68,1,0,0,0,217,218,5,44,0,0,218,70,
  	1,0,0,0,219,220,5,59,0,0,220,72,1,0,0,0,221,225,7,0,0,0,222,224,7,1,0,
  	0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,
  	74,1,0,0,0,227,225,1,0,0,0,228,250,5,48,0,0,229,233,7,2,0,0,230,232,7,
  	3,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,
  	234,250,1,0,0,0,235,233,1,0,0,0,236,238,5,48,0,0,237,239,7,4,0,0,238,
  	237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,250,1,
  	0,0,0,242,243,5,48,0,0,243,245,7,5,0,0,244,246,7,6,0,0,245,244,1,0,0,
  	0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,
  	228,1,0,0,0,249,229,1,0,0,0,249,236,1,0,0,0,249,242,1,0,0,0,250,76,1,
  	0,0,0,251,253,7,7,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,
  	254,256,5,46,0,0,255,257,7,3,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,
  	256,1,0,0,0,258,259,1,0,0,0,259,320,1,0,0,0,260,262,7,7,0,0,261,260,1,
  	0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,265,7,3,0,0,264,263,1,0,0,0,
  	265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,272,
  	5,46,0,0,269,271,7,3,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,
  	0,0,272,273,1,0,0,0,273,320,1,0,0,0,274,272,1,0,0,0,275,277,7,7,0,0,276,
  	275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,280,5,46,0,0,279,281,
  	7,3,0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,
  	0,283,284,1,0,0,0,284,286,7,8,0,0,285,287,7,9,0,0,286,285,1,0,0,0,286,
  	287,1,0,0,0,287,289,1,0,0,0,288,290,7,3,0,0,289,288,1,0,0,0,290,291,1,
  	0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,320,1,0,0,0,293,295,7,7,0,0,
  	294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,7,3,0,0,297,296,
  	1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,308,1,0,0,
  	0,301,305,5,46,0,0,302,304,7,3,0,0,303,302,1,0,0,0,304,307,1,0,0,0,305,
  	303,1,0,0,0,305,306,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,308,301,1,
  	0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,312,7,8,0,0,311,313,7,9,0,0,
  	312,311,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,316,7,3,0,0,315,314,
  	1,0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,
  	0,319,252,1,0,0,0,319,261,1,0,0,0,319,276,1,0,0,0,319,294,1,0,0,0,320,
  	321,1,0,0,0,321,322,7,10,0,0,322,78,1,0,0,0,323,325,7,7,0,0,324,323,1,
  	0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,328,5,46,0,0,327,329,7,3,0,
  	0,328,327,1,0,0,0,329,330,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,
  	392,1,0,0,0,332,334,7,7,0,0,333,332,1,0,0,0,333,334,1,0,0,0,334,336,1,
  	0,0,0,335,337,7,3,0,0,336,335,1,0,0,0,337,338,1,0,0,0,338,336,1,0,0,0,
  	338,339,1,0,0,0,339,340,1,0,0,0,340,344,5,46,0,0,341,343,7,3,0,0,342,
  	341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,392,1,
  	0,0,0,346,344,1,0,0,0,347,349,7,7,0,0,348,347,1,0,0,0,348,349,1,0,0,0,
  	349,350,1,0,0,0,350,352,5,46,0,0,351,353,7,3,0,0,352,351,1,0,0,0,353,
  	354,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,358,7,
  	8,0,0,357,359,7,9,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,
  	360,362,7,3,0,0,361,360,1,0,0,0,362,363,1,0,0,0,363,361,1,0,0,0,363,364,
  	1,0,0,0,364,392,1,0,0,0,365,367,7,7,0,0,366,365,1,0,0,0,366,367,1,0,0,
  	0,367,369,1,0,0,0,368,370,7,3,0,0,369,368,1,0,0,0,370,371,1,0,0,0,371,
  	369,1,0,0,0,371,372,1,0,0,0,372,380,1,0,0,0,373,377,5,46,0,0,374,376,
  	7,3,0,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,
  	0,378,381,1,0,0,0,379,377,1,0,0,0,380,373,1,0,0,0,380,381,1,0,0,0,381,
  	382,1,0,0,0,382,384,7,8,0,0,383,385,7,9,0,0,384,383,1,0,0,0,384,385,1,
  	0,0,0,385,387,1,0,0,0,386,388,7,3,0,0,387,386,1,0,0,0,388,389,1,0,0,0,
  	389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,324,1,0,0,0,391,333,
  	1,0,0,0,391,348,1,0,0,0,391,366,1,0,0,0,392,80,1,0,0,0,393,394,5,47,0,
  	0,394,395,5,47,0,0,395,399,1,0,0,0,396,398,8,11,0,0,397,396,1,0,0,0,398,
  	401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,1,
  	0,0,0,402,403,6,40,0,0,403,82,1,0,0,0,404,405,5,47,0,0,405,406,5,42,0,
  	0,406,410,1,0,0,0,407,409,9,0,0,0,408,407,1,0,0,0,409,412,1,0,0,0,410,
  	411,1,0,0,0,410,408,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,414,5,
  	42,0,0,414,415,5,47,0,0,415,416,1,0,0,0,416,417,6,41,0,0,417,84,1,0,0,
  	0,418,420,5,13,0,0,419,421,5,10,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,
  	424,1,0,0,0,422,424,5,10,0,0,423,418,1,0,0,0,423,422,1,0,0,0,424,425,
  	1,0,0,0,425,426,6,42,0,0,426,86,1,0,0,0,427,429,7,12,0,0,428,427,1,0,
  	0,0,429,430,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,
  	433,6,43,0,0,433,88,1,0,0,0,44,0,98,225,233,240,247,249,252,258,261,266,
  	272,276,282,286,291,294,299,305,308,312,317,319,324,330,333,338,344,348,
  	354,358,363,366,371,377,380,384,389,391,399,410,420,423,430,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cactlexerLexerStaticData = staticData.release();
}

}

CactLexer::CactLexer(CharStream *input) : Lexer(input) {
  CactLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cactlexerLexerStaticData->atn, cactlexerLexerStaticData->decisionToDFA, cactlexerLexerStaticData->sharedContextCache);
}

CactLexer::~CactLexer() {
  delete _interpreter;
}

std::string CactLexer::getGrammarFileName() const {
  return "CactLexer.g4";
}

const std::vector<std::string>& CactLexer::getRuleNames() const {
  return cactlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CactLexer::getChannelNames() const {
  return cactlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CactLexer::getModeNames() const {
  return cactlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CactLexer::getVocabulary() const {
  return cactlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CactLexer::getSerializedATN() const {
  return cactlexerLexerStaticData->serializedATN;
}

const atn::ATN& CactLexer::getATN() const {
  return *cactlexerLexerStaticData->atn;
}




void CactLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cactlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(cactlexerLexerOnceFlag, cactlexerLexerInitialize);
#endif
}
